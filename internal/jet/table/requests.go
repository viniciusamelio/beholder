//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Requests = newRequestsTable("", "requests", "")

type requestsTable struct {
	sqlite.Table

	// Columns
	ID            sqlite.ColumnString
	EnvironmentID sqlite.ColumnString
	SessionID     sqlite.ColumnString
	Name          sqlite.ColumnString
	UserID        sqlite.ColumnString
	Method        sqlite.ColumnString
	Path          sqlite.ColumnString
	Body          sqlite.ColumnString
	Headers       sqlite.ColumnString
	CalledAt      sqlite.ColumnTimestamp
	CreatedAt     sqlite.ColumnTimestamp
	UpdatedAt     sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type RequestsTable struct {
	requestsTable

	EXCLUDED requestsTable
}

// AS creates new RequestsTable with assigned alias
func (a RequestsTable) AS(alias string) *RequestsTable {
	return newRequestsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RequestsTable with assigned schema name
func (a RequestsTable) FromSchema(schemaName string) *RequestsTable {
	return newRequestsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RequestsTable with assigned table prefix
func (a RequestsTable) WithPrefix(prefix string) *RequestsTable {
	return newRequestsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RequestsTable with assigned table suffix
func (a RequestsTable) WithSuffix(suffix string) *RequestsTable {
	return newRequestsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRequestsTable(schemaName, tableName, alias string) *RequestsTable {
	return &RequestsTable{
		requestsTable: newRequestsTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newRequestsTableImpl("", "excluded", ""),
	}
}

func newRequestsTableImpl(schemaName, tableName, alias string) requestsTable {
	var (
		IDColumn            = sqlite.StringColumn("id")
		EnvironmentIDColumn = sqlite.StringColumn("environment_id")
		SessionIDColumn     = sqlite.StringColumn("session_id")
		NameColumn          = sqlite.StringColumn("name")
		UserIDColumn        = sqlite.StringColumn("user_id")
		MethodColumn        = sqlite.StringColumn("method")
		PathColumn          = sqlite.StringColumn("path")
		BodyColumn          = sqlite.StringColumn("body")
		HeadersColumn       = sqlite.StringColumn("headers")
		CalledAtColumn      = sqlite.TimestampColumn("called_at")
		CreatedAtColumn     = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn     = sqlite.TimestampColumn("updated_at")
		allColumns          = sqlite.ColumnList{IDColumn, EnvironmentIDColumn, SessionIDColumn, NameColumn, UserIDColumn, MethodColumn, PathColumn, BodyColumn, HeadersColumn, CalledAtColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns      = sqlite.ColumnList{EnvironmentIDColumn, SessionIDColumn, NameColumn, UserIDColumn, MethodColumn, PathColumn, BodyColumn, HeadersColumn, CalledAtColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return requestsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		EnvironmentID: EnvironmentIDColumn,
		SessionID:     SessionIDColumn,
		Name:          NameColumn,
		UserID:        UserIDColumn,
		Method:        MethodColumn,
		Path:          PathColumn,
		Body:          BodyColumn,
		Headers:       HeadersColumn,
		CalledAt:      CalledAtColumn,
		CreatedAt:     CreatedAtColumn,
		UpdatedAt:     UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
