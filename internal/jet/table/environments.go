//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Environments = newEnvironmentsTable("", "environments", "")

type environmentsTable struct {
	sqlite.Table

	// Columns
	ID          sqlite.ColumnInteger
	Name        sqlite.ColumnString
	Description sqlite.ColumnString
	Tags        sqlite.ColumnString
	BaseURL     sqlite.ColumnString
	CreatedAt   sqlite.ColumnTimestamp
	UpdatedAt   sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type EnvironmentsTable struct {
	environmentsTable

	EXCLUDED environmentsTable
}

// AS creates new EnvironmentsTable with assigned alias
func (a EnvironmentsTable) AS(alias string) *EnvironmentsTable {
	return newEnvironmentsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EnvironmentsTable with assigned schema name
func (a EnvironmentsTable) FromSchema(schemaName string) *EnvironmentsTable {
	return newEnvironmentsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EnvironmentsTable with assigned table prefix
func (a EnvironmentsTable) WithPrefix(prefix string) *EnvironmentsTable {
	return newEnvironmentsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EnvironmentsTable with assigned table suffix
func (a EnvironmentsTable) WithSuffix(suffix string) *EnvironmentsTable {
	return newEnvironmentsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEnvironmentsTable(schemaName, tableName, alias string) *EnvironmentsTable {
	return &EnvironmentsTable{
		environmentsTable: newEnvironmentsTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newEnvironmentsTableImpl("", "excluded", ""),
	}
}

func newEnvironmentsTableImpl(schemaName, tableName, alias string) environmentsTable {
	var (
		IDColumn          = sqlite.IntegerColumn("id")
		NameColumn        = sqlite.StringColumn("name")
		DescriptionColumn = sqlite.StringColumn("description")
		TagsColumn        = sqlite.StringColumn("tags")
		BaseURLColumn     = sqlite.StringColumn("base_url")
		CreatedAtColumn   = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn   = sqlite.TimestampColumn("updated_at")
		allColumns        = sqlite.ColumnList{IDColumn, NameColumn, DescriptionColumn, TagsColumn, BaseURLColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns    = sqlite.ColumnList{NameColumn, DescriptionColumn, TagsColumn, BaseURLColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return environmentsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Name:        NameColumn,
		Description: DescriptionColumn,
		Tags:        TagsColumn,
		BaseURL:     BaseURLColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
