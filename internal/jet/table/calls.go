//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Calls = newCallsTable("", "calls", "")

type callsTable struct {
	sqlite.Table

	// Columns
	ID          sqlite.ColumnString
	SessionID   sqlite.ColumnInteger
	Name        sqlite.ColumnString
	Method      sqlite.ColumnString
	Path        sqlite.ColumnString
	Headers     sqlite.ColumnString
	Body        sqlite.ColumnString
	QueryParams sqlite.ColumnString
	CalledAt    sqlite.ColumnTimestamp
	CreatedAt   sqlite.ColumnTimestamp
	UpdatedAt   sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type CallsTable struct {
	callsTable

	EXCLUDED callsTable
}

// AS creates new CallsTable with assigned alias
func (a CallsTable) AS(alias string) *CallsTable {
	return newCallsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CallsTable with assigned schema name
func (a CallsTable) FromSchema(schemaName string) *CallsTable {
	return newCallsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CallsTable with assigned table prefix
func (a CallsTable) WithPrefix(prefix string) *CallsTable {
	return newCallsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CallsTable with assigned table suffix
func (a CallsTable) WithSuffix(suffix string) *CallsTable {
	return newCallsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCallsTable(schemaName, tableName, alias string) *CallsTable {
	return &CallsTable{
		callsTable: newCallsTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newCallsTableImpl("", "excluded", ""),
	}
}

func newCallsTableImpl(schemaName, tableName, alias string) callsTable {
	var (
		IDColumn          = sqlite.StringColumn("id")
		SessionIDColumn   = sqlite.IntegerColumn("session_id")
		NameColumn        = sqlite.StringColumn("name")
		MethodColumn      = sqlite.StringColumn("method")
		PathColumn        = sqlite.StringColumn("path")
		HeadersColumn     = sqlite.StringColumn("headers")
		BodyColumn        = sqlite.StringColumn("body")
		QueryParamsColumn = sqlite.StringColumn("query_params")
		CalledAtColumn    = sqlite.TimestampColumn("called_at")
		CreatedAtColumn   = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn   = sqlite.TimestampColumn("updated_at")
		allColumns        = sqlite.ColumnList{IDColumn, SessionIDColumn, NameColumn, MethodColumn, PathColumn, HeadersColumn, BodyColumn, QueryParamsColumn, CalledAtColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns    = sqlite.ColumnList{SessionIDColumn, NameColumn, MethodColumn, PathColumn, HeadersColumn, BodyColumn, QueryParamsColumn, CalledAtColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return callsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		SessionID:   SessionIDColumn,
		Name:        NameColumn,
		Method:      MethodColumn,
		Path:        PathColumn,
		Headers:     HeadersColumn,
		Body:        BodyColumn,
		QueryParams: QueryParamsColumn,
		CalledAt:    CalledAtColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
