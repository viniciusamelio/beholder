// Code generated by github.com/go-surreal/som, DO NOT EDIT.
package som

import (
	models "beholder-api/internal/application/models"
	conv "beholder-api/internal/gen/som/conv"
	query "beholder-api/internal/gen/som/query"
	relate "beholder-api/internal/gen/som/relate"
	"context"
	"errors"
	som "github.com/go-surreal/som"
)

type CallRepo interface {
	Query() query.Builder[models.Call, conv.Call]
	Create(ctx context.Context, call *models.Call) error
	CreateWithID(ctx context.Context, id string, call *models.Call) error
	Read(ctx context.Context, id *som.ID) (*models.Call, bool, error)
	Update(ctx context.Context, call *models.Call) error
	Delete(ctx context.Context, call *models.Call) error
	Refresh(ctx context.Context, call *models.Call) error
	Relate() *relate.Call
}

// CallRepo returns a new repository instance for the Call model.
func (c *ClientImpl) CallRepo() CallRepo {
	return &call{repo: &repo[models.Call, conv.Call]{
		db:       c.db,
		name:     "call",
		convTo:   conv.ToCallPtr,
		convFrom: conv.FromCallPtr}}
}

type call struct {
	*repo[models.Call, conv.Call]
}

// Query returns a new query builder for the Call model.
func (r *call) Query() query.Builder[models.Call, conv.Call] {
	return query.NewCall(r.db)
}

// Create creates a new record for the Call model.
// The ID will be generated automatically as a ULID.
func (r *call) Create(ctx context.Context, call *models.Call) error {
	if call == nil {
		return errors.New("the passed node must not be nil")
	}
	if call.ID() != nil {
		return errors.New("given node already has an id")
	}
	return r.create(ctx, call)
}

// CreateWithID creates a new record for the Call model with the given id.
func (r *call) CreateWithID(ctx context.Context, id string, call *models.Call) error {
	if call == nil {
		return errors.New("the passed node must not be nil")
	}
	if call.ID() != nil {
		return errors.New("given node already has an id")
	}
	return r.createWithID(ctx, id, call)
}

// Read returns the record for the given id, if it exists.
// The returned bool indicates whether the record was found or not.
func (r *call) Read(ctx context.Context, id *som.ID) (*models.Call, bool, error) {
	return r.read(ctx, id)
}

// Update updates the record for the given model.
func (r *call) Update(ctx context.Context, call *models.Call) error {
	if call == nil {
		return errors.New("the passed node must not be nil")
	}
	if call.ID() == nil {
		return errors.New("cannot update Call without existing record ID")
	}
	return r.update(ctx, call.ID(), call)
}

// Delete deletes the record for the given model.
func (r *call) Delete(ctx context.Context, call *models.Call) error {
	if call == nil {
		return errors.New("the passed node must not be nil")
	}
	return r.delete(ctx, call.ID(), call)
}

// Refresh refreshes the given model with the remote data.
func (r *call) Refresh(ctx context.Context, call *models.Call) error {
	if call == nil {
		return errors.New("the passed node must not be nil")
	}
	if call.ID() == nil {
		return errors.New("cannot refresh Call without existing record ID")
	}
	return r.refresh(ctx, call.ID(), call)
}

// Relate returns a new relate instance for the Call model.
func (r *call) Relate() *relate.Call {
	return relate.NewCall(r.db)
}
