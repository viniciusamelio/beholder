// Code generated by github.com/go-surreal/som, DO NOT EDIT.
package som

import (
	models "beholder-api/internal/application/models"
	conv "beholder-api/internal/gen/som/conv"
	query "beholder-api/internal/gen/som/query"
	relate "beholder-api/internal/gen/som/relate"
	"context"
	"errors"
	som "github.com/go-surreal/som"
)

type EnvironmentRepo interface {
	Query() query.Builder[models.Environment, conv.Environment]
	Create(ctx context.Context, environment *models.Environment) error
	CreateWithID(ctx context.Context, id string, environment *models.Environment) error
	Read(ctx context.Context, id *som.ID) (*models.Environment, bool, error)
	Update(ctx context.Context, environment *models.Environment) error
	Delete(ctx context.Context, environment *models.Environment) error
	Refresh(ctx context.Context, environment *models.Environment) error
	Relate() *relate.Environment
}

// EnvironmentRepo returns a new repository instance for the Environment model.
func (c *ClientImpl) EnvironmentRepo() EnvironmentRepo {
	return &environment{repo: &repo[models.Environment, conv.Environment]{
		db:       c.db,
		name:     "environment",
		convTo:   conv.ToEnvironmentPtr,
		convFrom: conv.FromEnvironmentPtr}}
}

type environment struct {
	*repo[models.Environment, conv.Environment]
}

// Query returns a new query builder for the Environment model.
func (r *environment) Query() query.Builder[models.Environment, conv.Environment] {
	return query.NewEnvironment(r.db)
}

// Create creates a new record for the Environment model.
// The ID will be generated automatically as a ULID.
func (r *environment) Create(ctx context.Context, environment *models.Environment) error {
	if environment == nil {
		return errors.New("the passed node must not be nil")
	}
	if environment.ID() != nil {
		return errors.New("given node already has an id")
	}
	return r.create(ctx, environment)
}

// CreateWithID creates a new record for the Environment model with the given id.
func (r *environment) CreateWithID(ctx context.Context, id string, environment *models.Environment) error {
	if environment == nil {
		return errors.New("the passed node must not be nil")
	}
	if environment.ID() != nil {
		return errors.New("given node already has an id")
	}
	return r.createWithID(ctx, id, environment)
}

// Read returns the record for the given id, if it exists.
// The returned bool indicates whether the record was found or not.
func (r *environment) Read(ctx context.Context, id *som.ID) (*models.Environment, bool, error) {
	return r.read(ctx, id)
}

// Update updates the record for the given model.
func (r *environment) Update(ctx context.Context, environment *models.Environment) error {
	if environment == nil {
		return errors.New("the passed node must not be nil")
	}
	if environment.ID() == nil {
		return errors.New("cannot update Environment without existing record ID")
	}
	return r.update(ctx, environment.ID(), environment)
}

// Delete deletes the record for the given model.
func (r *environment) Delete(ctx context.Context, environment *models.Environment) error {
	if environment == nil {
		return errors.New("the passed node must not be nil")
	}
	return r.delete(ctx, environment.ID(), environment)
}

// Refresh refreshes the given model with the remote data.
func (r *environment) Refresh(ctx context.Context, environment *models.Environment) error {
	if environment == nil {
		return errors.New("the passed node must not be nil")
	}
	if environment.ID() == nil {
		return errors.New("cannot refresh Environment without existing record ID")
	}
	return r.refresh(ctx, environment.ID(), environment)
}

// Relate returns a new relate instance for the Environment model.
func (r *environment) Relate() *relate.Environment {
	return relate.NewEnvironment(r.db)
}
