// Code generated by github.com/go-surreal/som, DO NOT EDIT.
package where

import (
	models "beholder-api/internal/application/models"
	lib "beholder-api/internal/gen/som/internal/lib"
)

var Environment = newEnvironment[models.Environment](lib.NewKey[models.Environment]())

func newEnvironment[M any](key lib.Key[M]) environment[M] {
	return environment[M]{
		BaseUrl:   lib.NewString[M](lib.Field(key, "base_url")),
		CreatedAt: lib.NewTimePtr[M](lib.Field(key, "created_at")),
		ID:        lib.NewID[M](lib.Field(key, "id"), "environment"),
		Key:       key,
		Name:      lib.NewString[M](lib.Field(key, "name")),
		Tags:      lib.NewStringSlice[M](lib.Field(key, "tags")),
		UID:       lib.NewInt[M, int](lib.Field(key, "uid")),
		UpdatedAt: lib.NewTimePtr[M](lib.Field(key, "updated_at")),
	}
}

type environment[M any] struct {
	lib.Key[M]
	ID        *lib.ID[M]
	UID       *lib.Int[M, int]
	Name      *lib.String[M]
	Tags      *lib.StringSlice[M]
	BaseUrl   *lib.String[M]
	CreatedAt *lib.TimePtr[M]
	UpdatedAt *lib.TimePtr[M]
}

func (n environment[M]) Sessions(filters ...lib.Filter[models.Session]) *lib.Slice[M, models.Session, session[M]] {
	key := lib.Node(n.Key, "sessions", filters)
	return lib.NewSlice[M, models.Session, session[M]](key, newSession[M])
}

type environmentEdges[M any] struct {
	lib.Filter[M]
	lib.Key[M]
}
