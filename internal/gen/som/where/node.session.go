// Code generated by github.com/go-surreal/som, DO NOT EDIT.
package where

import (
	models "beholder-api/internal/application/models"
	lib "beholder-api/internal/gen/som/internal/lib"
)

var Session = newSession[models.Session](lib.NewKey[models.Session]())

func newSession[M any](key lib.Key[M]) session[M] {
	return session[M]{
		CreatedAt: lib.NewTimePtr[M](lib.Field(key, "created_at")),
		EnvUID:    lib.NewInt[M, int](lib.Field(key, "env_uid")),
		ID:        lib.NewID[M](lib.Field(key, "id"), "session"),
		Key:       key,
		UID:       lib.NewInt[M, int](lib.Field(key, "uid")),
		UpdatedAt: lib.NewTimePtr[M](lib.Field(key, "updated_at")),
		UserID:    lib.NewString[M](lib.Field(key, "user_id")),
	}
}

type session[M any] struct {
	lib.Key[M]
	ID        *lib.ID[M]
	UID       *lib.Int[M, int]
	EnvUID    *lib.Int[M, int]
	UserID    *lib.String[M]
	CreatedAt *lib.TimePtr[M]
	UpdatedAt *lib.TimePtr[M]
}

func (n session[M]) Env() environment[M] {
	return newEnvironment[M](lib.Field(n.Key, "env"))
}

type sessionEdges[M any] struct {
	lib.Filter[M]
	lib.Key[M]
}
