// Code generated by github.com/go-surreal/som, DO NOT EDIT.
package conv

import (
	models "beholder-api/internal/application/models"
	v2 "github.com/fxamacker/cbor/v2"
	sdbc "github.com/go-surreal/sdbc"
	som "github.com/go-surreal/som"
)

type Session struct {
	ID        *som.ID          `cbor:"id,omitempty"`
	UID       int              `cbor:"uid"`
	EnvUID    int              `cbor:"env_uid"`
	UserID    string           `cbor:"user_id"`
	CreatedAt *sdbc.DateTime   `cbor:"created_at"`
	UpdatedAt *sdbc.DateTime   `cbor:"updated_at"`
	Env       *environmentLink `cbor:"env"`
}

func FromSession(data models.Session) Session {
	return Session{
		CreatedAt: fromTimePtr(data.CreatedAt),
		Env:       toEnvironmentLink(data.Env),
		EnvUID:    data.EnvUID,
		UID:       data.UID,
		UpdatedAt: fromTimePtr(data.UpdatedAt),
		UserID:    data.UserID,
	}
}
func FromSessionPtr(data *models.Session) *Session {
	if data == nil {
		return nil
	}
	return &Session{
		CreatedAt: fromTimePtr(data.CreatedAt),
		Env:       toEnvironmentLink(data.Env),
		EnvUID:    data.EnvUID,
		UID:       data.UID,
		UpdatedAt: fromTimePtr(data.UpdatedAt),
		UserID:    data.UserID,
	}
}

func ToSession(data Session) models.Session {
	return models.Session{
		CreatedAt: toTimePtr(data.CreatedAt),
		Env:       fromEnvironmentLink(data.Env),
		EnvUID:    data.EnvUID,
		Node:      som.NewNode(data.ID),
		UID:       data.UID,
		UpdatedAt: toTimePtr(data.UpdatedAt),
		UserID:    data.UserID,
	}
}
func ToSessionPtr(data *Session) *models.Session {
	if data == nil {
		return nil
	}
	return &models.Session{
		CreatedAt: toTimePtr(data.CreatedAt),
		Env:       fromEnvironmentLink(data.Env),
		EnvUID:    data.EnvUID,
		Node:      som.NewNode(data.ID),
		UID:       data.UID,
		UpdatedAt: toTimePtr(data.UpdatedAt),
		UserID:    data.UserID,
	}
}

type sessionLink struct {
	Session
	ID *som.ID
}

func (f *sessionLink) MarshalCBOR() ([]byte, error) {
	if f == nil {
		return nil, nil
	}
	return v2.Marshal(f.ID)
}

func (f *sessionLink) UnmarshalCBOR(data []byte) error {
	if err := v2.Unmarshal(data, &f.ID); err == nil {
		return nil
	}
	type alias sessionLink
	var link alias
	err := v2.Unmarshal(data, &link)
	if err == nil {
		*f = sessionLink(link)
	}
	return err
}

func fromSessionLink(link *sessionLink) models.Session {
	if link == nil {
		return models.Session{}
	}
	res := Session(link.Session)
	return ToSession(res)
}

func fromSessionLinkPtr(link *sessionLink) *models.Session {
	if link == nil {
		return nil
	}
	res := Session(link.Session)
	out := ToSession(res)
	return &out
}

func toSessionLink(node models.Session) *sessionLink {
	if node.ID() == nil {
		return nil
	}
	link := sessionLink{Session: FromSession(node), ID: node.ID()}
	return &link
}

func toSessionLinkPtr(node *models.Session) *sessionLink {
	if node == nil || node.ID() == nil {
		return nil
	}
	link := sessionLink{Session: FromSession(*node), ID: node.ID()}
	return &link
}
