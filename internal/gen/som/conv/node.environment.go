// Code generated by github.com/go-surreal/som, DO NOT EDIT.
package conv

import (
	models "beholder-api/internal/application/models"
	v2 "github.com/fxamacker/cbor/v2"
	sdbc "github.com/go-surreal/sdbc"
	som "github.com/go-surreal/som"
)

type Environment struct {
	ID        *som.ID         `cbor:"id,omitempty"`
	UID       int             `cbor:"uid"`
	Name      string          `cbor:"name"`
	Tags      []string        `cbor:"tags"`
	BaseUrl   string          `cbor:"base_url"`
	CreatedAt *sdbc.DateTime  `cbor:"created_at"`
	UpdatedAt *sdbc.DateTime  `cbor:"updated_at"`
	Sessions  *[]*sessionLink `cbor:"sessions"`
}

func FromEnvironment(data models.Environment) Environment {
	return Environment{
		BaseUrl:   data.BaseUrl,
		CreatedAt: fromTimePtr(data.CreatedAt),
		Name:      data.Name,
		Sessions:  mapSliceFnPtr(toSessionLinkPtr)(data.Sessions),
		Tags:      data.Tags,
		UID:       data.UID,
		UpdatedAt: fromTimePtr(data.UpdatedAt),
	}
}
func FromEnvironmentPtr(data *models.Environment) *Environment {
	if data == nil {
		return nil
	}
	return &Environment{
		BaseUrl:   data.BaseUrl,
		CreatedAt: fromTimePtr(data.CreatedAt),
		Name:      data.Name,
		Sessions:  mapSliceFnPtr(toSessionLinkPtr)(data.Sessions),
		Tags:      data.Tags,
		UID:       data.UID,
		UpdatedAt: fromTimePtr(data.UpdatedAt),
	}
}

func ToEnvironment(data Environment) models.Environment {
	return models.Environment{
		BaseUrl:   data.BaseUrl,
		CreatedAt: toTimePtr(data.CreatedAt),
		Name:      data.Name,
		Node:      som.NewNode(data.ID),
		Sessions:  mapSliceFnPtr(fromSessionLinkPtr)(data.Sessions),
		Tags:      data.Tags,
		UID:       data.UID,
		UpdatedAt: toTimePtr(data.UpdatedAt),
	}
}
func ToEnvironmentPtr(data *Environment) *models.Environment {
	if data == nil {
		return nil
	}
	return &models.Environment{
		BaseUrl:   data.BaseUrl,
		CreatedAt: toTimePtr(data.CreatedAt),
		Name:      data.Name,
		Node:      som.NewNode(data.ID),
		Sessions:  mapSliceFnPtr(fromSessionLinkPtr)(data.Sessions),
		Tags:      data.Tags,
		UID:       data.UID,
		UpdatedAt: toTimePtr(data.UpdatedAt),
	}
}

type environmentLink struct {
	Environment
	ID *som.ID
}

func (f *environmentLink) MarshalCBOR() ([]byte, error) {
	if f == nil {
		return nil, nil
	}
	return v2.Marshal(f.ID)
}

func (f *environmentLink) UnmarshalCBOR(data []byte) error {
	if err := v2.Unmarshal(data, &f.ID); err == nil {
		return nil
	}
	type alias environmentLink
	var link alias
	err := v2.Unmarshal(data, &link)
	if err == nil {
		*f = environmentLink(link)
	}
	return err
}

func fromEnvironmentLink(link *environmentLink) models.Environment {
	if link == nil {
		return models.Environment{}
	}
	res := Environment(link.Environment)
	return ToEnvironment(res)
}

func fromEnvironmentLinkPtr(link *environmentLink) *models.Environment {
	if link == nil {
		return nil
	}
	res := Environment(link.Environment)
	out := ToEnvironment(res)
	return &out
}

func toEnvironmentLink(node models.Environment) *environmentLink {
	if node.ID() == nil {
		return nil
	}
	link := environmentLink{Environment: FromEnvironment(node), ID: node.ID()}
	return &link
}

func toEnvironmentLinkPtr(node *models.Environment) *environmentLink {
	if node == nil || node.ID() == nil {
		return nil
	}
	link := environmentLink{Environment: FromEnvironment(*node), ID: node.ID()}
	return &link
}
