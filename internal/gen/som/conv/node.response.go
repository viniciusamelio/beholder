// Code generated by github.com/go-surreal/som, DO NOT EDIT.
package conv

import (
	models "beholder-api/internal/application/models"
	v2 "github.com/fxamacker/cbor/v2"
	sdbc "github.com/go-surreal/sdbc"
	som "github.com/go-surreal/som"
)

type Response struct {
	ID        *som.ID        `cbor:"id,omitempty"`
	UID       int            `cbor:"uid"`
	Status    int            `cbor:"status"`
	CallUID   int            `cbor:"call_uid"`
	Body      *string        `cbor:"body"`
	Headers   *string        `cbor:"headers"`
	CreatedAt *sdbc.DateTime `cbor:"created_at"`
	SentAt    sdbc.DateTime  `cbor:"sent_at"`
	Call      *callLink      `cbor:"call"`
}

func FromResponse(data models.Response) Response {
	return Response{
		Body:      data.Body,
		Call:      toCallLinkPtr(data.Call),
		CallUID:   data.CallUID,
		CreatedAt: fromTimePtr(data.CreatedAt),
		Headers:   data.Headers,
		SentAt:    fromTime(data.SentAt),
		Status:    data.Status,
		UID:       data.UID,
	}
}
func FromResponsePtr(data *models.Response) *Response {
	if data == nil {
		return nil
	}
	return &Response{
		Body:      data.Body,
		Call:      toCallLinkPtr(data.Call),
		CallUID:   data.CallUID,
		CreatedAt: fromTimePtr(data.CreatedAt),
		Headers:   data.Headers,
		SentAt:    fromTime(data.SentAt),
		Status:    data.Status,
		UID:       data.UID,
	}
}

func ToResponse(data Response) models.Response {
	return models.Response{
		Body:      data.Body,
		Call:      fromCallLinkPtr(data.Call),
		CallUID:   data.CallUID,
		CreatedAt: toTimePtr(data.CreatedAt),
		Headers:   data.Headers,
		Node:      som.NewNode(data.ID),
		SentAt:    toTime(data.SentAt),
		Status:    data.Status,
		UID:       data.UID,
	}
}
func ToResponsePtr(data *Response) *models.Response {
	if data == nil {
		return nil
	}
	return &models.Response{
		Body:      data.Body,
		Call:      fromCallLinkPtr(data.Call),
		CallUID:   data.CallUID,
		CreatedAt: toTimePtr(data.CreatedAt),
		Headers:   data.Headers,
		Node:      som.NewNode(data.ID),
		SentAt:    toTime(data.SentAt),
		Status:    data.Status,
		UID:       data.UID,
	}
}

type responseLink struct {
	Response
	ID *som.ID
}

func (f *responseLink) MarshalCBOR() ([]byte, error) {
	if f == nil {
		return nil, nil
	}
	return v2.Marshal(f.ID)
}

func (f *responseLink) UnmarshalCBOR(data []byte) error {
	if err := v2.Unmarshal(data, &f.ID); err == nil {
		return nil
	}
	type alias responseLink
	var link alias
	err := v2.Unmarshal(data, &link)
	if err == nil {
		*f = responseLink(link)
	}
	return err
}

func fromResponseLink(link *responseLink) models.Response {
	if link == nil {
		return models.Response{}
	}
	res := Response(link.Response)
	return ToResponse(res)
}

func fromResponseLinkPtr(link *responseLink) *models.Response {
	if link == nil {
		return nil
	}
	res := Response(link.Response)
	out := ToResponse(res)
	return &out
}

func toResponseLink(node models.Response) *responseLink {
	if node.ID() == nil {
		return nil
	}
	link := responseLink{Response: FromResponse(node), ID: node.ID()}
	return &link
}

func toResponseLinkPtr(node *models.Response) *responseLink {
	if node == nil || node.ID() == nil {
		return nil
	}
	link := responseLink{Response: FromResponse(*node), ID: node.ID()}
	return &link
}
