// Code generated by github.com/go-surreal/som, DO NOT EDIT.
package conv

import (
	models "beholder-api/internal/application/models"
	v2 "github.com/fxamacker/cbor/v2"
	sdbc "github.com/go-surreal/sdbc"
	som "github.com/go-surreal/som"
)

type Call struct {
	ID          *som.ID        `cbor:"id,omitempty"`
	UID         int            `cbor:"uid"`
	SessionUID  *int           `cbor:"session_uid"`
	Name        string         `cbor:"name"`
	Path        *string        `cbor:"path"`
	Body        *string        `cbor:"body"`
	QueryParams *string        `cbor:"query_params"`
	UserID      *string        `cbor:"user_id"`
	Method      string         `cbor:"method"`
	CalledAt    sdbc.DateTime  `cbor:"called_at"`
	CreatedAt   *sdbc.DateTime `cbor:"created_at"`
	Session     *sessionLink   `cbor:"session"`
}

func FromCall(data models.Call) Call {
	return Call{
		Body:        data.Body,
		CalledAt:    fromTime(data.CalledAt),
		CreatedAt:   fromTimePtr(data.CreatedAt),
		Method:      data.Method,
		Name:        data.Name,
		Path:        data.Path,
		QueryParams: data.QueryParams,
		Session:     toSessionLinkPtr(data.Session),
		SessionUID:  data.SessionUID,
		UID:         data.UID,
		UserID:      data.UserID,
	}
}
func FromCallPtr(data *models.Call) *Call {
	if data == nil {
		return nil
	}
	return &Call{
		Body:        data.Body,
		CalledAt:    fromTime(data.CalledAt),
		CreatedAt:   fromTimePtr(data.CreatedAt),
		Method:      data.Method,
		Name:        data.Name,
		Path:        data.Path,
		QueryParams: data.QueryParams,
		Session:     toSessionLinkPtr(data.Session),
		SessionUID:  data.SessionUID,
		UID:         data.UID,
		UserID:      data.UserID,
	}
}

func ToCall(data Call) models.Call {
	return models.Call{
		Body:        data.Body,
		CalledAt:    toTime(data.CalledAt),
		CreatedAt:   toTimePtr(data.CreatedAt),
		Method:      data.Method,
		Name:        data.Name,
		Node:        som.NewNode(data.ID),
		Path:        data.Path,
		QueryParams: data.QueryParams,
		Session:     fromSessionLinkPtr(data.Session),
		SessionUID:  data.SessionUID,
		UID:         data.UID,
		UserID:      data.UserID,
	}
}
func ToCallPtr(data *Call) *models.Call {
	if data == nil {
		return nil
	}
	return &models.Call{
		Body:        data.Body,
		CalledAt:    toTime(data.CalledAt),
		CreatedAt:   toTimePtr(data.CreatedAt),
		Method:      data.Method,
		Name:        data.Name,
		Node:        som.NewNode(data.ID),
		Path:        data.Path,
		QueryParams: data.QueryParams,
		Session:     fromSessionLinkPtr(data.Session),
		SessionUID:  data.SessionUID,
		UID:         data.UID,
		UserID:      data.UserID,
	}
}

type callLink struct {
	Call
	ID *som.ID
}

func (f *callLink) MarshalCBOR() ([]byte, error) {
	if f == nil {
		return nil, nil
	}
	return v2.Marshal(f.ID)
}

func (f *callLink) UnmarshalCBOR(data []byte) error {
	if err := v2.Unmarshal(data, &f.ID); err == nil {
		return nil
	}
	type alias callLink
	var link alias
	err := v2.Unmarshal(data, &link)
	if err == nil {
		*f = callLink(link)
	}
	return err
}

func fromCallLink(link *callLink) models.Call {
	if link == nil {
		return models.Call{}
	}
	res := Call(link.Call)
	return ToCall(res)
}

func fromCallLinkPtr(link *callLink) *models.Call {
	if link == nil {
		return nil
	}
	res := Call(link.Call)
	out := ToCall(res)
	return &out
}

func toCallLink(node models.Call) *callLink {
	if node.ID() == nil {
		return nil
	}
	link := callLink{Call: FromCall(node), ID: node.ID()}
	return &link
}

func toCallLinkPtr(node *models.Call) *callLink {
	if node == nil || node.ID() == nil {
		return nil
	}
	link := callLink{Call: FromCall(*node), ID: node.ID()}
	return &link
}
