// Code generated by github.com/go-surreal/som, DO NOT EDIT.
package by

import (
	models "beholder-api/internal/application/models"
	lib "beholder-api/internal/gen/som/internal/lib"
)

var Call = newCall[models.Call]("")

func newCall[M any](key string) call[M] {
	return call[M]{
		Body:        lib.NewStringSort[M](keyed(key, "body")),
		CalledAt:    lib.NewBaseSort[M](keyed(key, "called_at")),
		CreatedAt:   lib.NewBaseSort[M](keyed(key, "created_at")),
		EnvUID:      lib.NewBaseSort[M](keyed(key, "env_uid")),
		ID:          lib.NewBaseSort[M](keyed(key, "id")),
		Method:      lib.NewStringSort[M](keyed(key, "method")),
		Name:        lib.NewStringSort[M](keyed(key, "name")),
		Path:        lib.NewStringSort[M](keyed(key, "path")),
		QueryParams: lib.NewStringSort[M](keyed(key, "query_params")),
		SessionUID:  lib.NewBaseSort[M](keyed(key, "session_uid")),
		UID:         lib.NewBaseSort[M](keyed(key, "uid")),
		UserID:      lib.NewStringSort[M](keyed(key, "user_id")),
		key:         key,
	}
}

type call[M any] struct {
	key         string
	ID          *lib.BaseSort[M]
	UID         *lib.BaseSort[M]
	EnvUID      *lib.BaseSort[M]
	SessionUID  *lib.BaseSort[M]
	Name        *lib.StringSort[M]
	Path        *lib.StringSort[M]
	Body        *lib.StringSort[M]
	QueryParams *lib.StringSort[M]
	UserID      *lib.StringSort[M]
	Method      *lib.StringSort[M]
	CalledAt    *lib.BaseSort[M]
	CreatedAt   *lib.BaseSort[M]
}

func (n call[M]) Session() session[M] {
	return newSession[M](keyed(n.key, "session"))
}

func (n call[M]) Env() environment[M] {
	return newEnvironment[M](keyed(n.key, "env"))
}
