// Code generated by github.com/go-surreal/som, DO NOT EDIT.
package som

import (
	models "beholder-api/internal/application/models"
	conv "beholder-api/internal/gen/som/conv"
	query "beholder-api/internal/gen/som/query"
	relate "beholder-api/internal/gen/som/relate"
	"context"
	"errors"
	som "github.com/go-surreal/som"
)

type SessionRepo interface {
	Query() query.Builder[models.Session, conv.Session]
	Create(ctx context.Context, session *models.Session) error
	CreateWithID(ctx context.Context, id string, session *models.Session) error
	Read(ctx context.Context, id *som.ID) (*models.Session, bool, error)
	Update(ctx context.Context, session *models.Session) error
	Delete(ctx context.Context, session *models.Session) error
	Refresh(ctx context.Context, session *models.Session) error
	Relate() *relate.Session
}

// SessionRepo returns a new repository instance for the Session model.
func (c *ClientImpl) SessionRepo() SessionRepo {
	return &session{repo: &repo[models.Session, conv.Session]{
		db:       c.db,
		name:     "session",
		convTo:   conv.ToSessionPtr,
		convFrom: conv.FromSessionPtr}}
}

type session struct {
	*repo[models.Session, conv.Session]
}

// Query returns a new query builder for the Session model.
func (r *session) Query() query.Builder[models.Session, conv.Session] {
	return query.NewSession(r.db)
}

// Create creates a new record for the Session model.
// The ID will be generated automatically as a ULID.
func (r *session) Create(ctx context.Context, session *models.Session) error {
	if session == nil {
		return errors.New("the passed node must not be nil")
	}
	if session.ID() != nil {
		return errors.New("given node already has an id")
	}
	return r.create(ctx, session)
}

// CreateWithID creates a new record for the Session model with the given id.
func (r *session) CreateWithID(ctx context.Context, id string, session *models.Session) error {
	if session == nil {
		return errors.New("the passed node must not be nil")
	}
	if session.ID() != nil {
		return errors.New("given node already has an id")
	}
	return r.createWithID(ctx, id, session)
}

// Read returns the record for the given id, if it exists.
// The returned bool indicates whether the record was found or not.
func (r *session) Read(ctx context.Context, id *som.ID) (*models.Session, bool, error) {
	return r.read(ctx, id)
}

// Update updates the record for the given model.
func (r *session) Update(ctx context.Context, session *models.Session) error {
	if session == nil {
		return errors.New("the passed node must not be nil")
	}
	if session.ID() == nil {
		return errors.New("cannot update Session without existing record ID")
	}
	return r.update(ctx, session.ID(), session)
}

// Delete deletes the record for the given model.
func (r *session) Delete(ctx context.Context, session *models.Session) error {
	if session == nil {
		return errors.New("the passed node must not be nil")
	}
	return r.delete(ctx, session.ID(), session)
}

// Refresh refreshes the given model with the remote data.
func (r *session) Refresh(ctx context.Context, session *models.Session) error {
	if session == nil {
		return errors.New("the passed node must not be nil")
	}
	if session.ID() == nil {
		return errors.New("cannot refresh Session without existing record ID")
	}
	return r.refresh(ctx, session.ID(), session)
}

// Relate returns a new relate instance for the Session model.
func (r *session) Relate() *relate.Session {
	return relate.NewSession(r.db)
}
